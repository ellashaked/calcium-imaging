{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Calcium Imaging","text":"<p>Easily analyze VSI outputs.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#1-installation","title":"1. Installation","text":"<p>Open Google Colab and create a new notebook, for example <code>calcium-imaging.ipynb</code>.</p> <p>Install the toolkit - execute this in the first cell of your notebook:</p> <pre><code>!rm -rf calcium-imaging &amp;&amp; git clone https://github.com/ellashaked/calcium-imaging.git &amp;&amp; cd calcium-imaging &amp;&amp; pip install .\n</code></pre>"},{"location":"#2-setup-google-drive","title":"2. Setup Google Drive","text":"<p>Link your personal Google Drive - execute this in the second cell and click Connect to Google Drive:</p> <pre><code>from google.colab import drive\nfrom pathlib import Path\n\ndrive.mount('/drive', force_remount=True)\nHOME = Path(\"/drive\") / \"MyDrive\"\n</code></pre>"},{"location":"#3-path-to-raw-data-files","title":"3. Path to raw data files","text":"<p>This toolkit scans your directory for <code>.xls</code> files named in the following format <code>&lt;coverslip-id&gt; - &lt;group-type&gt;.xls</code>. Please make sure the files are in this format, otherwise you will encounter problems.</p> <p>Add another cell in your notebook that holds that path to the directory (folder) with your VSI output files.</p> <pre><code>experiment_dir = HOME / \"path\" / \"to\" / \"fish_NCLX_10-04-25\"\n</code></pre>"},{"location":"#4-reading-experiments","title":"4. Reading experiments","text":"<p>To read an experiment, you first have to instantiate a <code>Preprocessor</code> object that will hold the preprocessing settings.</p> <pre><code>from calcium_imaging import Preprocessor\n\npreprocessor = Preprocessor(\n    first_n_points_to_discard=5,\n    smoothing_windows_size=2,\n    normalization_sampling_start_frame=1,\n    normalization_sampling_end_frame=35,\n    earliest_onset_frame=50,\n    earliest_baseline_recovery_frame=130,\n    drop_traces_with_corrupted_peak=False,\n    drop_background_fluorescence_cols=True,\n)\n</code></pre> <p>After you've set your preprocessor settings, you can load an experiment (multiple coverslips).</p> <pre><code>from calcium_imaging import load_experiment\n\nexp = load_experiment(\n    experiment_dir=experiment_dir,\n    preprocessor=preprocessor\n)\n</code></pre>"},{"location":"#5-usage-examples","title":"5. Usage Examples","text":"<pre><code>exp[\"control\"][3][15].visualize()  # experiment[&lt;group&gt;][&lt;coverslip-id&gt;][&lt;roi-id&gt;]\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#experiment","title":"<code>Experiment</code>","text":"<ul> <li><code>exp.save_mega_dfs(results_output_dir_path=\"./results\")</code> - Saves mega dfs to requested path.</li> <li><code>exp.visualize()</code> - Shows mean trace per group.</li> <li><code>exp.visualize_all_rois()</code> - Shows the trace of every ROI in the experiment.</li> <li><code>exp.visualize_eflux_bar_chart()</code> - Shows the eflux bar chart for all ROIs.</li> <li><code>exp.get_full_analysis_df()</code></li> </ul>"},{"location":"#group","title":"<code>Group</code>","text":"<ul> <li><code>exp[\"group_type\"].align_onsets()</code> - Aligns all onsets to the median onset.</li> </ul>"},{"location":"#coverslip","title":"<code>Coverslip</code>","text":"<ul> <li><code>exp[\"group_type\"][cs_id].drop_roi(roi_id)</code> - Deletes ROI from Coverslip </li> <li><code>exp[\"group_type\"][cs_id].align_onsets(target_onset_id)</code> </li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>calcium_imaging<ul> <li>analysis<ul> <li>baseline_return_detection</li> <li>eflux_calculation</li> <li>influx_calculation</li> <li>linear_fit</li> <li>onset_detection</li> <li>peak_detection</li> <li>regression_coefficients</li> </ul> </li> <li>data_models<ul> <li>coverslip</li> <li>experiment</li> <li>group</li> <li>research</li> <li>roi</li> </ul> </li> <li>instantiation</li> <li>io<ul> <li>load_vsi</li> <li>validate_experiment_dir</li> </ul> </li> <li>processing<ul> <li>constants</li> <li>extract_coverslip_info_from_filename</li> <li>extract_roi_id_from_col_name</li> <li>preprocessor</li> </ul> </li> <li>ui<ul> <li>get_bool_input</li> <li>get_int_input</li> </ul> </li> <li>viz<ul> <li>create_trace_figure</li> <li>plotly_color_iterator</li> </ul> </li> </ul> </li> </ul>"},{"location":"api_reference/calcium_imaging/instantiation/","title":"instantiation","text":""},{"location":"api_reference/calcium_imaging/instantiation/#calcium_imaging.instantiation","title":"<code>calcium_imaging.instantiation</code>","text":""},{"location":"api_reference/calcium_imaging/instantiation/#calcium_imaging.instantiation-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/instantiation/#calcium_imaging.instantiation-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/instantiation/#calcium_imaging.instantiation.load_experiment","title":"<code>load_experiment(experiment_dir: Union[str, Path], preprocessor: Preprocessor) -&gt; Experiment</code>","text":"<p>Reads an experiment directory and parses it into an Experiment class object</p>"},{"location":"api_reference/calcium_imaging/instantiation/#calcium_imaging.instantiation-modules","title":"Modules","text":""},{"location":"api_reference/calcium_imaging/analysis/baseline_return_detection/","title":"baseline_return_detection","text":""},{"location":"api_reference/calcium_imaging/analysis/baseline_return_detection/#calcium_imaging.analysis.baseline_return_detection","title":"<code>calcium_imaging.analysis.baseline_return_detection</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/baseline_return_detection/#calcium_imaging.analysis.baseline_return_detection-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/analysis/baseline_return_detection/#calcium_imaging.analysis.baseline_return_detection.detect_baseline_return_idx","title":"<code>detect_baseline_return_idx(trace: pd.Series, eflux_start_idx: int) -&gt; int</code>","text":"<p>Detects the index where the trace crosses the eflux linear fit (returns to baseline). Args:     trace (pd.Series): The fluorescence trace.     eflux_start_idx (int): Start index for eflux. Returns:     int: Index where trace crosses the eflux linear fit.</p>"},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/","title":"eflux_calculation","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation","title":"<code>calcium_imaging.analysis.eflux_calculation</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation.EFLUX_END_INDEX_MAX_OFFSET_FROM_START","title":"<code>EFLUX_END_INDEX_MAX_OFFSET_FROM_START = 30</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation.EFLUX_END_INDEX_MIN_OFFSET_FROM_START","title":"<code>EFLUX_END_INDEX_MIN_OFFSET_FROM_START = 3</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation.EFLUX_START_INDEX_OFFSET_FROM_PEAK","title":"<code>EFLUX_START_INDEX_OFFSET_FROM_PEAK = 5</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation.calculate_eflux_linear_coefficients","title":"<code>calculate_eflux_linear_coefficients(trace: pd.Series, start_idx: Optional[int] = None, end_idx: Optional[int] = None) -&gt; RegressionCoefficients1D</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation.detect_eflux_end_index","title":"<code>detect_eflux_end_index(trace: pd.Series) -&gt; int</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/eflux_calculation/#calcium_imaging.analysis.eflux_calculation.detect_eflux_start_index","title":"<code>detect_eflux_start_index(trace: pd.Series) -&gt; int</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/","title":"influx_calculation","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/#calcium_imaging.analysis.influx_calculation","title":"<code>calcium_imaging.analysis.influx_calculation</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/#calcium_imaging.analysis.influx_calculation-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/#calcium_imaging.analysis.influx_calculation.INFLUX_END_INDEX_OFFSET_FROM_PEAK","title":"<code>INFLUX_END_INDEX_OFFSET_FROM_PEAK = 1</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/#calcium_imaging.analysis.influx_calculation.INFLUX_START_INDEX_MAX_OFFSET_FROM_END","title":"<code>INFLUX_START_INDEX_MAX_OFFSET_FROM_END = 60</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/#calcium_imaging.analysis.influx_calculation.INFLUX_START_INDEX_MIN_OFFSET_FROM_END","title":"<code>INFLUX_START_INDEX_MIN_OFFSET_FROM_END = 2</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/#calcium_imaging.analysis.influx_calculation-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/#calcium_imaging.analysis.influx_calculation-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/analysis/influx_calculation/#calcium_imaging.analysis.influx_calculation.calculate_influx_linear_coefficients","title":"<code>calculate_influx_linear_coefficients(trace: pd.Series, start_idx: Optional[int] = None, end_idx: Optional[int] = None) -&gt; RegressionCoefficients1D</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/linear_fit/","title":"linear_fit","text":""},{"location":"api_reference/calcium_imaging/analysis/linear_fit/#calcium_imaging.analysis.linear_fit","title":"<code>calcium_imaging.analysis.linear_fit</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/linear_fit/#calcium_imaging.analysis.linear_fit-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/analysis/linear_fit/#calcium_imaging.analysis.linear_fit-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/analysis/linear_fit/#calcium_imaging.analysis.linear_fit.linear_fit","title":"<code>linear_fit(trace: pd.Series, start_idx: int, end_idx: int) -&gt; RegressionCoefficients1D</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/onset_detection/","title":"onset_detection","text":""},{"location":"api_reference/calcium_imaging/analysis/onset_detection/#calcium_imaging.analysis.onset_detection","title":"<code>calcium_imaging.analysis.onset_detection</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/onset_detection/#calcium_imaging.analysis.onset_detection-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/analysis/onset_detection/#calcium_imaging.analysis.onset_detection.detect_onset_index","title":"<code>detect_onset_index(trace: pd.Series, start_bound: int = 40, end_bound: int = 80, baseline_window: int = 30, sliding_window: int = 3, threshold_factor: float = 3.0) -&gt; int</code>","text":"<p>Detects the onset of a transient in a trace within a given window.</p> <p>Parameters: - trace: pd.Series of numeric values - start_bound: index to start searching for the onset - end_bound: index to stop searching - baseline_window: number of points before start_bound to estimate baseline fluctuation - sliding_window: size of the moving average window (delta computed over this window) - threshold_factor: multiplier of baseline std to define onset</p> <p>Returns: - onset index (int) within bounds where signal \"explodes\"</p>"},{"location":"api_reference/calcium_imaging/analysis/peak_detection/","title":"peak_detection","text":""},{"location":"api_reference/calcium_imaging/analysis/peak_detection/#calcium_imaging.analysis.peak_detection","title":"<code>calcium_imaging.analysis.peak_detection</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/peak_detection/#calcium_imaging.analysis.peak_detection-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/analysis/peak_detection/#calcium_imaging.analysis.peak_detection.detect_peak_index","title":"<code>detect_peak_index(trace: pd.Series, end_bound: int = 120, baseline_window: int = 30, sliding_window: int = 3, threshold_factor: float = 3.0) -&gt; int</code>","text":"<p>Detects a peak in a trace within the given bounds.</p> <p>Parameters: - trace: pd.Series of numeric values - start_bound: start index for peak search - end_bound: end index for peak search - baseline_window: window size before start_bound to estimate noise level - sliding_window: how many points to consider when comparing local max - threshold_factor: peak must exceed baseline by this factor (std units)</p> <p>Returns: - Index of detected peak (int)</p>"},{"location":"api_reference/calcium_imaging/analysis/regression_coefficients/","title":"regression_coefficients","text":""},{"location":"api_reference/calcium_imaging/analysis/regression_coefficients/#calcium_imaging.analysis.regression_coefficients","title":"<code>calcium_imaging.analysis.regression_coefficients</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/regression_coefficients/#calcium_imaging.analysis.regression_coefficients-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/analysis/regression_coefficients/#calcium_imaging.analysis.regression_coefficients.RegressionCoefficients1D","title":"<code>RegressionCoefficients1D</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"api_reference/calcium_imaging/analysis/regression_coefficients/#calcium_imaging.analysis.regression_coefficients.RegressionCoefficients1D-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/analysis/regression_coefficients/#calcium_imaging.analysis.regression_coefficients.RegressionCoefficients1D.intercept","title":"<code>intercept: float</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/analysis/regression_coefficients/#calcium_imaging.analysis.regression_coefficients.RegressionCoefficients1D.slope","title":"<code>slope: float</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/","title":"coverslip","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip","title":"<code>calcium_imaging.data_models.coverslip</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip","title":"<code>Coverslip</code>","text":"<p>One plate</p>"},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.group_type","title":"<code>group_type = group_type</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.id","title":"<code>id = coverslip_id</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.name","title":"<code>name = f'cs-{self.id}'</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.rois","title":"<code>rois = self._init_rois(rois)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.title","title":"<code>title = f'Coverslip {self.id} (ROIs {', '.join(str(roi.roi_id) for roi in self.rois)})'</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.align_onsets","title":"<code>align_onsets(target_onset_idx: Optional[int] = None) -&gt; int</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.calculate_amplitudes","title":"<code>calculate_amplitudes() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.calculate_eflux_rates","title":"<code>calculate_eflux_rates() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.calculate_integrals","title":"<code>calculate_integrals() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.calculate_taus","title":"<code>calculate_taus() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.drop_roi","title":"<code>drop_roi(roi_id: int) -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.get_df","title":"<code>get_df() -&gt; pd.DataFrame</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.get_mean_trace","title":"<code>get_mean_trace() -&gt; pd.Series</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip.Coverslip.visualize","title":"<code>visualize(title_prefix: Optional[str] = None) -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/coverslip/#calcium_imaging.data_models.coverslip-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/","title":"experiment","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment","title":"<code>calcium_imaging.data_models.experiment</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment","title":"<code>Experiment</code>","text":"<p>A folder containing multiple Conditions, e.g., 'SI_SH_check'.</p>"},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.groups","title":"<code>groups = sorted(groups, key=lambda g: g.group_type)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.num_groups","title":"<code>num_groups = len(self.groups)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.num_rois","title":"<code>num_rois = len([roi for roi in self.iter_rois()])</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.title","title":"<code>title = f'{name} (Groups {', '.join([str(group.group_type) for group in self.groups])})'</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.align_onsets","title":"<code>align_onsets() -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.calculate_amplitudes","title":"<code>calculate_amplitudes() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.calculate_eflux_rates","title":"<code>calculate_eflux_rates() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.calculate_integrals","title":"<code>calculate_integrals() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.calculate_taus","title":"<code>calculate_taus() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.get_full_analysis_df","title":"<code>get_full_analysis_df() -&gt; pd.DataFrame</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.get_group_type_to_df","title":"<code>get_group_type_to_df() -&gt; Dict[str, pd.DataFrame]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.get_mean_traces_df","title":"<code>get_mean_traces_df() -&gt; pd.DataFrame</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.iter_rois","title":"<code>iter_rois() -&gt; Iterator[ROI]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.run_manual_analysis","title":"<code>run_manual_analysis() -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.save_mega_dfs","title":"<code>save_mega_dfs(results_output_dir_path: str = './results') -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.visualize","title":"<code>visualize() -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.visualize_all_rois","title":"<code>visualize_all_rois() -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment.Experiment.visualize_eflux_bar_chart","title":"<code>visualize_eflux_bar_chart() -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/data_models/experiment/#calcium_imaging.data_models.experiment-modules","title":"Modules","text":""},{"location":"api_reference/calcium_imaging/data_models/group/","title":"group","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group","title":"<code>calcium_imaging.data_models.group</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group","title":"<code>Group</code>","text":"<p>One group with certain intervention, e.g. 'shNCLX'.</p>"},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.coverslips","title":"<code>coverslips = self._init_coverslips(coverslips)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.group_type","title":"<code>group_type = self._infer_group_type()</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.title","title":"<code>title = f'{self.group_type} (Coverslips {', '.join([str(cs.id) for cs in self.coverslips])})'</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.align_onsets","title":"<code>align_onsets(target_onset_idx: Optional[int] = None) -&gt; int</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.calculate_amplitudes","title":"<code>calculate_amplitudes() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.calculate_eflux_rates","title":"<code>calculate_eflux_rates() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.calculate_integrals","title":"<code>calculate_integrals() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.calculate_taus","title":"<code>calculate_taus() -&gt; List[Dict[str, float]]</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.get_df","title":"<code>get_df() -&gt; pd.DataFrame</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.get_mean_trace","title":"<code>get_mean_trace() -&gt; pd.Series</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group.Group.visualize","title":"<code>visualize(title_prefix: Optional[str] = None) -&gt; None</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/group/#calcium_imaging.data_models.group-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/data_models/research/","title":"research","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research","title":"<code>calcium_imaging.data_models.research</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research","title":"<code>Research</code>","text":"<p>A collection of multiple experiments.</p>"},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research.experiments","title":"<code>experiments = sorted(experiments, key=lambda e: e.name)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research.num_experiments","title":"<code>num_experiments = len(self.experiments)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research.num_groups","title":"<code>num_groups = sum(e.num_groups for e in self.experiments)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research.num_rois","title":"<code>num_rois = sum(e.num_rois for e in self.experiments)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research.title","title":"<code>title = f'{name} (Experiments {', '.join([e.name for e in self.experiments])})'</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research.get_full_analysis_df","title":"<code>get_full_analysis_df() -&gt; pd.DataFrame</code>","text":"<p>Get a combined DataFrame of all experiments' analysis results.</p>"},{"location":"api_reference/calcium_imaging/data_models/research/#calcium_imaging.data_models.research.Research.save_mega_dfs","title":"<code>save_mega_dfs(results_output_dir_path: str = './results') -&gt; None</code>","text":"<p>Save analysis results for all experiments.</p>"},{"location":"api_reference/calcium_imaging/data_models/roi/","title":"roi","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi","title":"<code>calcium_imaging.data_models.roi</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI","title":"<code>ROI</code>","text":"<p>A class representing a single region of interest (ROI) in calcium imaging data.</p> <p>This class handles the analysis and visualization of calcium imaging data for a single ROI, including calculation of influx/eflux rates, amplitude, integral, and tau values.</p> <p>Attributes:</p> Name Type Description <code>coverslip_id</code> <code>int</code> <p>The ID of the coverslip this ROI belongs to.</p> <code>roi_id</code> <code>int</code> <p>The unique identifier for this ROI.</p> <code>group_type</code> <code>str</code> <p>The type of group this ROI belongs to.</p> <code>name</code> <code>str</code> <p>A formatted name combining coverslip and ROI IDs.</p> <code>title</code> <code>str</code> <p>A descriptive title for the ROI.</p> <code>time</code> <code>Series</code> <p>Time series data for the ROI.</p> <code>trace</code> <code>Series</code> <p>Fluorescence trace data for the ROI.</p> <code>onset_idx</code> <code>int</code> <p>Index of the onset of the calcium response.</p> <code>peak_idx</code> <code>int</code> <p>Index of the peak of the calcium response.</p> <code>influx_start_idx</code> <code>int</code> <p>Start index for influx calculation.</p> <code>influx_end_idx</code> <code>int</code> <p>End index for influx calculation.</p> <code>eflux_start_idx</code> <code>int</code> <p>Start index for eflux calculation.</p> <code>eflux_end_idx</code> <code>int</code> <p>End index for eflux calculation.</p> <code>baseline_return_idx</code> <code>int</code> <p>Index where the trace returns to baseline.</p>"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.EFLUX_START_INDEX_OFFSET_FROM_PEAK","title":"<code>EFLUX_START_INDEX_OFFSET_FROM_PEAK = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.baseline_return_idx","title":"<code>baseline_return_idx = detect_baseline_return_idx(self.trace, self.eflux_start_idx)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.coverslip_id","title":"<code>coverslip_id = coverslip_id</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.eflux_end_idx","title":"<code>eflux_end_idx = detect_eflux_end_index(self.trace)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.eflux_start_idx","title":"<code>eflux_start_idx = self.peak_idx + self.EFLUX_START_INDEX_OFFSET_FROM_PEAK</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.group_type","title":"<code>group_type = group_type</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.influx_end_idx","title":"<code>influx_end_idx = self.peak_idx</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.influx_start_idx","title":"<code>influx_start_idx = self.onset_idx</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.name","title":"<code>name = f'cs-{self.coverslip_id}_roi-{self.roi_id}'</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.onset_idx","title":"<code>onset_idx = detect_onset_index(self.trace)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.peak_idx","title":"<code>peak_idx = detect_peak_index(self.trace)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.roi_id","title":"<code>roi_id = roi_id</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.time","title":"<code>time = time.copy(deep=True).rename(f'time_{self.name}')</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.title","title":"<code>title = f'ROI {self.roi_id} (Coverslip {self.coverslip_id}, {self.group_type})'</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.trace","title":"<code>trace = trace.copy(deep=True).rename(self.name)</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.calculate_amplitude","title":"<code>calculate_amplitude() -&gt; float</code>","text":"<p>Calculate the amplitude of the calcium response.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The amplitude, calculated as the peak value minus 1.</p>"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.calculate_eflux","title":"<code>calculate_eflux() -&gt; float</code>","text":"<p>Calculate the eflux rate of calcium for this ROI.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The calculated eflux rate.</p>"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.calculate_influx","title":"<code>calculate_influx() -&gt; float</code>","text":"<p>Calculate the influx rate of calcium for this ROI.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The calculated influx rate.</p>"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.calculate_integral","title":"<code>calculate_integral() -&gt; float</code>","text":"<p>Calculate the integral of the trace from onset to baseline return using the trapezoidal rule.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The calculated integral of the trace.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If baseline_return_idx is not set (equals -999).</p>"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.calculate_tau","title":"<code>calculate_tau() -&gt; float</code>","text":"<p>Calculate the time constant (tau) of the calcium response decay.</p> <p>Tau is calculated as the time between the peak and when the trace reaches 63.2% of the amplitude decay from peak.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The calculated tau value.</p>"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.set_baseline_return_idx","title":"<code>set_baseline_return_idx(baseline_return_idx: int) -&gt; None</code>","text":"<p>Set a new baseline return index.</p> <p>Parameters:</p> Name Type Description Default <code>baseline_return_idx</code> <code>int</code> <p>The new baseline return index to set.</p> required"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.set_onset_idx","title":"<code>set_onset_idx(onset_idx: int) -&gt; None</code>","text":"<p>Set a new onset index and update related indices.</p> <p>Parameters:</p> Name Type Description Default <code>onset_idx</code> <code>int</code> <p>The new onset index to set.</p> required"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.set_peak_idx","title":"<code>set_peak_idx(peak_idx: int) -&gt; None</code>","text":"<p>Set a new peak index and update related indices.</p> <p>Parameters:</p> Name Type Description Default <code>peak_idx</code> <code>int</code> <p>The new peak index to set.</p> required"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.shift_trace","title":"<code>shift_trace(periods: int) -&gt; None</code>","text":"<p>Shift the trace and all associated indices by a specified number of periods.</p> <p>Parameters:</p> Name Type Description Default <code>periods</code> <code>int</code> <p>Number of periods to shift the trace and indices.</p> required"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi.ROI.visualize","title":"<code>visualize(title_prefix: Optional[str] = None) -&gt; None</code>","text":"<p>Create and display a visualization of the ROI trace with key points marked.</p> <p>Parameters:</p> Name Type Description Default <code>title_prefix</code> <code>Optional[str]</code> <p>Optional prefix to add to the plot title.</p> <code>None</code>"},{"location":"api_reference/calcium_imaging/data_models/roi/#calcium_imaging.data_models.roi-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/io/load_vsi/","title":"load_vsi","text":""},{"location":"api_reference/calcium_imaging/io/load_vsi/#calcium_imaging.io.load_vsi","title":"<code>calcium_imaging.io.load_vsi</code>","text":""},{"location":"api_reference/calcium_imaging/io/load_vsi/#calcium_imaging.io.load_vsi-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/io/load_vsi/#calcium_imaging.io.load_vsi.load_vsi","title":"<code>load_vsi(path: Path) -&gt; pd.DataFrame</code>","text":""},{"location":"api_reference/calcium_imaging/io/validate_experiment_dir/","title":"validate_experiment_dir","text":""},{"location":"api_reference/calcium_imaging/io/validate_experiment_dir/#calcium_imaging.io.validate_experiment_dir","title":"<code>calcium_imaging.io.validate_experiment_dir</code>","text":""},{"location":"api_reference/calcium_imaging/io/validate_experiment_dir/#calcium_imaging.io.validate_experiment_dir-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/io/validate_experiment_dir/#calcium_imaging.io.validate_experiment_dir.validate_experiment_dir","title":"<code>validate_experiment_dir(experiment_dir: Union[str, Path]) -&gt; Path</code>","text":""},{"location":"api_reference/calcium_imaging/processing/constants/","title":"constants","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants","title":"<code>calcium_imaging.processing.constants</code>","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants.BACKGROUND_FLUORESCENCE_ROIS","title":"<code>BACKGROUND_FLUORESCENCE_ROIS = [BACKGROUND_FLUORESCENCE_ROI_1, BACKGROUND_FLUORESCENCE_ROI_2, BACKGROUND_FLUORESCENCE_ROI_3]</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants.BACKGROUND_FLUORESCENCE_ROI_1","title":"<code>BACKGROUND_FLUORESCENCE_ROI_1 = 'ROI 1 (Average)'</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants.BACKGROUND_FLUORESCENCE_ROI_2","title":"<code>BACKGROUND_FLUORESCENCE_ROI_2 = 'ROI 2 (Average)'</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants.BACKGROUND_FLUORESCENCE_ROI_3","title":"<code>BACKGROUND_FLUORESCENCE_ROI_3 = 'ROI 3 (Average)'</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants.COVERSLIP_FILENAME_STEM_PATTERN","title":"<code>COVERSLIP_FILENAME_STEM_PATTERN = re.compile('^\\\\s*(?P&lt;coverslip_id&gt;\\\\d+)\\\\s*-\\\\s*(?P&lt;group_type&gt;.+?)\\\\s*$')</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants.ROI_COL_PATTERN","title":"<code>ROI_COL_PATTERN = re.compile('^ROI\\\\s*(\\\\d+)\\\\s*\\\\(Average\\\\)$')</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/constants/#calcium_imaging.processing.constants.TIME_COL","title":"<code>TIME_COL = 'Time (ms)'</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/","title":"extract_coverslip_info_from_filename","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename","title":"<code>calcium_imaging.processing.extract_coverslip_info_from_filename</code>","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename.CoverslipInfo","title":"<code>CoverslipInfo</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename.CoverslipInfo-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename.CoverslipInfo.coverslip_id","title":"<code>coverslip_id: int</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename.CoverslipInfo.group_type","title":"<code>group_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename.extract_coverslip_info_from_filename_stem","title":"<code>extract_coverslip_info_from_filename_stem(filename: str) -&gt; CoverslipInfo</code>","text":"<p>Extracts coverslip ID and group type from a string of the form ' - ' and returns a CoverslipInfo tuple."},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename.extract_coverslip_info_from_filename_stem--parameters","title":"Parameters","text":"<p>filename : str     The filename or label to parse.</p>"},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename.extract_coverslip_info_from_filename_stem--returns","title":"Returns","text":"<p>CoverslipInfo     NamedTuple(coverslip_id, group_type)</p>"},{"location":"api_reference/calcium_imaging/processing/extract_coverslip_info_from_filename/#calcium_imaging.processing.extract_coverslip_info_from_filename.extract_coverslip_info_from_filename_stem--raises","title":"Raises","text":"<p>ValueError     If <code>name</code> doesn\u2019t match the expected pattern.</p>"},{"location":"api_reference/calcium_imaging/processing/extract_roi_id_from_col_name/","title":"extract_roi_id_from_col_name","text":""},{"location":"api_reference/calcium_imaging/processing/extract_roi_id_from_col_name/#calcium_imaging.processing.extract_roi_id_from_col_name","title":"<code>calcium_imaging.processing.extract_roi_id_from_col_name</code>","text":""},{"location":"api_reference/calcium_imaging/processing/extract_roi_id_from_col_name/#calcium_imaging.processing.extract_roi_id_from_col_name-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/processing/extract_roi_id_from_col_name/#calcium_imaging.processing.extract_roi_id_from_col_name-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/processing/extract_roi_id_from_col_name/#calcium_imaging.processing.extract_roi_id_from_col_name.extract_roi_id_from_col_name","title":"<code>extract_roi_id_from_col_name(col_name: str) -&gt; Optional[int]</code>","text":"<p>Extract the ROI ID from a column name of the form 'ROI  (Average)'."},{"location":"api_reference/calcium_imaging/processing/extract_roi_id_from_col_name/#calcium_imaging.processing.extract_roi_id_from_col_name.extract_roi_id_from_col_name--parameters","title":"Parameters","text":"<p>col_name : str     The column name to inspect.</p>"},{"location":"api_reference/calcium_imaging/processing/extract_roi_id_from_col_name/#calcium_imaging.processing.extract_roi_id_from_col_name.extract_roi_id_from_col_name--returns","title":"Returns","text":"<p>Optional[int]     The integer ROI number if the name matches, otherwise None.</p>"},{"location":"api_reference/calcium_imaging/processing/preprocessor/","title":"preprocessor","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor","title":"<code>calcium_imaging.processing.preprocessor</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor","title":"<code>Preprocessor</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor-attributes","title":"Attributes","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.background_fluorescence_cols_names","title":"<code>background_fluorescence_cols_names = background_fluorescence_cols_names</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.drop_background_fluorescence_cols","title":"<code>drop_background_fluorescence_cols = drop_background_fluorescence_cols</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.drop_traces_with_corrupted_peak","title":"<code>drop_traces_with_corrupted_peak = drop_traces_with_corrupted_peak</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.earliest_baseline_recovery_frame","title":"<code>earliest_baseline_recovery_frame = earliest_baseline_recovery_frame</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.earliest_onset_frame","title":"<code>earliest_onset_frame = earliest_onset_frame</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.first_n_points_to_discard","title":"<code>first_n_points_to_discard = first_n_points_to_discard</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.normalization_sampling_end_frame","title":"<code>normalization_sampling_end_frame = normalization_sampling_end_frame</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.normalization_sampling_start_frame","title":"<code>normalization_sampling_start_frame = normalization_sampling_start_frame</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.smoothing_windows_size","title":"<code>smoothing_windows_size = smoothing_windows_size</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.time_col_name","title":"<code>time_col_name = time_col_name</code>  <code>instance-attribute</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.correct_overshoot","title":"<code>correct_overshoot(trace: pd.Series, factor_threshold: float, factor_replacement: float, pre_window: int = 35) -&gt; pd.Series</code>  <code>staticmethod</code>","text":"<p>Clamp samples whose value exceeds     smooth + factor_threshold * mean_pre_peaks to     smooth + factor_replacement * mean_pre_peaks.</p> <p>The moving-average of the trace (window=10) is used as the \u201csmooth\u201d estimate.</p>"},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.discard_first_n_points","title":"<code>discard_first_n_points(df: pd.DataFrame, n: int) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.noisy_pre_rise","title":"<code>noisy_pre_rise(trace: pd.Series, factor_mean: float, factor_peak: float, start_index: int = 35) -&gt; bool</code>  <code>staticmethod</code>","text":"<p>Returns True if the pre-rise segment is noisy per MATLAB rules.</p> <p>Rule 1 \u2013 mean(pre-segment peaks) \u00b7 factor_mean  &gt; global_max Rule 2 \u2013 max(pre-segment peaks)  \u00b7 factor_peak  &gt; global_max</p>"},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.normalize","title":"<code>normalize(df: pd.DataFrame, sampling_start_frame: int = 1, sampling_end_frame: int = 35) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>Assuming df includes only cell ROIs (no dead / fluorescence background) ROIs or time cols</p>"},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.preprocess","title":"<code>preprocess(df: pd.DataFrame) -&gt; pd.DataFrame</code>","text":""},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.reject_noise","title":"<code>reject_noise(df: pd.DataFrame, *, start_index: int = 35, factor_mean: float = 7.0, factor_peak: float = 2.0, overshoot_thresh: float = 2.0, overshoot_repl: float = 3.0) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>Drop columns considered artifactual.</p> <p>Criteria (mirrors original MATLAB logic):</p> <ol> <li>Global peak occurs before the rising point  \u2192 remove column.</li> <li>Pre-rise segment too noisy (see <code>noisy_pre_rise</code>)            \u2192 remove.</li> <li>Overshoot spikes above threshold are corrected in-place    before criteria 1\u20132 are evaluated.</li> </ol>"},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.reject_noise--returns","title":"Returns","text":"<p>pd.DataFrame     Cleaned dataframe with offending columns removed.</p>"},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.smoothen","title":"<code>smoothen(df: pd.DataFrame, window_size: int = 2) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>Assuming df includes only cell ROIs (no dead / fluorescence background) ROIs or time cols</p>"},{"location":"api_reference/calcium_imaging/processing/preprocessor/#calcium_imaging.processing.preprocessor.Preprocessor.subtract_baseline_fluorescence","title":"<code>subtract_baseline_fluorescence(df: pd.DataFrame, background_roi_cols: List[str]) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":""},{"location":"api_reference/calcium_imaging/ui/get_bool_input/","title":"get_bool_input","text":""},{"location":"api_reference/calcium_imaging/ui/get_bool_input/#calcium_imaging.ui.get_bool_input","title":"<code>calcium_imaging.ui.get_bool_input</code>","text":""},{"location":"api_reference/calcium_imaging/ui/get_bool_input/#calcium_imaging.ui.get_bool_input-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/ui/get_bool_input/#calcium_imaging.ui.get_bool_input.get_bool_input","title":"<code>get_bool_input(prompt: str) -&gt; bool</code>","text":""},{"location":"api_reference/calcium_imaging/ui/get_int_input/","title":"get_int_input","text":""},{"location":"api_reference/calcium_imaging/ui/get_int_input/#calcium_imaging.ui.get_int_input","title":"<code>calcium_imaging.ui.get_int_input</code>","text":""},{"location":"api_reference/calcium_imaging/ui/get_int_input/#calcium_imaging.ui.get_int_input-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/ui/get_int_input/#calcium_imaging.ui.get_int_input.get_int_input","title":"<code>get_int_input(prompt: str, min_value: int = None, max_value: int = None, allow_none: bool = True) -&gt; int | None</code>","text":""},{"location":"api_reference/calcium_imaging/viz/create_trace_figure/","title":"create_trace_figure","text":""},{"location":"api_reference/calcium_imaging/viz/create_trace_figure/#calcium_imaging.viz.create_trace_figure","title":"<code>calcium_imaging.viz.create_trace_figure</code>","text":""},{"location":"api_reference/calcium_imaging/viz/create_trace_figure/#calcium_imaging.viz.create_trace_figure-classes","title":"Classes","text":""},{"location":"api_reference/calcium_imaging/viz/create_trace_figure/#calcium_imaging.viz.create_trace_figure-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/viz/create_trace_figure/#calcium_imaging.viz.create_trace_figure.create_traces_figure","title":"<code>create_traces_figure(main_trace: pd.Series, main_trace_peak_index: Optional[int] = None, main_trace_onset_index: Optional[int] = None, main_trace_baseline_return_index: Optional[int] = None, additional_traces: Optional[Iterable[pd.Series]] = None, additional_traces_peak_indexes: Optional[List[int]] = None, additional_traces_onset_indexes: Optional[List[int]] = None, additional_traces_baseline_return_indexes: Optional[List[int]] = None, title: Optional[str] = None, xaxis_title: Optional[str] = None, yaxis_title: Optional[str] = None, eflux_linear_coefficients: Optional[RegressionCoefficients1D] = None, influx_linear_coefficients: Optional[RegressionCoefficients1D] = None, yaxis_range: Optional[Tuple[float, float]] = (0.5, 2), traces_color: Optional[str] = 'blue') -&gt; go.Figure</code>","text":""},{"location":"api_reference/calcium_imaging/viz/plotly_color_iterator/","title":"plotly_color_iterator","text":""},{"location":"api_reference/calcium_imaging/viz/plotly_color_iterator/#calcium_imaging.viz.plotly_color_iterator","title":"<code>calcium_imaging.viz.plotly_color_iterator</code>","text":""},{"location":"api_reference/calcium_imaging/viz/plotly_color_iterator/#calcium_imaging.viz.plotly_color_iterator-functions","title":"Functions","text":""},{"location":"api_reference/calcium_imaging/viz/plotly_color_iterator/#calcium_imaging.viz.plotly_color_iterator.get_n_colors_from_palette","title":"<code>get_n_colors_from_palette(n: int, palette_name: str = 'Plotly') -&gt; List[str]</code>","text":""}]}